#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# aioarangodb documentation build configuration file, created by
# sphinx-quickstart on Thu Apr 19 03:40:33 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

_version = {}
with open("../aioarangodb/version.py") as fp:
    exec(fp.read(), _version)

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.coverage',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'aioarangodb'
copyright = '2016, Joohwan Oh, Ramon Navarro'
author = 'Joohwan Oh & Ramon Navarro'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = _version['__version__']
# The full version, including alpha/beta/rc tags.
release = _version['__version__']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'aioarangodbdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'aioarangodb.tex', 'aioarangodb Documentation',
     'Joohwan Oh & Ramon Navarro', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'aioarangodb', 'aioarangodb Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'aioarangodb', 'aioarangodb Documentation',
     author, 'aioarangodb', 'One line description of project.',
     'Miscellaneous'),
]

autodoc_member_order = 'bysource'

doctest_global_setup = """
from aioarangodb import ArangoClient

# Initialize the ArangoDB client.
client = ArangoClient()

# Connect to "_system" database as root user.
sys_db = await client.db('_system', username='root', password='passwd')

# Create "test" database if it does not exist.
if not await sys_db.has_database('test'):
    await sys_db.create_database('test')

# Ensure that user "johndoe@gmail.com" does not exist.
if await sys_db.has_user('johndoe@gmail.com'):
    await sys_db.delete_user('johndoe@gmail.com')

# Connect to "test" database as root user.
db = await client.db('test', username='root', password='passwd')

# Create "students" collection if it does not exist.
if await db.has_collection('students'):
    await db.collection('students').truncate()
else:
    await db.create_collection('students')

# Ensure that "cities" collection does not exist.
if await db.has_collection('cities'):
    await db.delete_collection('cities')

# Create "school" graph if it does not exist.
if await db.has_graph("school"):
    school = db.graph('school')
else:
    await school = db.create_graph('school')

# Create "teachers" vertex collection if it does not exist.
if await school.has_vertex_collection('teachers'):
    school.vertex_collection('teachers').truncate()
else:
    await school.create_vertex_collection('teachers')

# Create "lectures" vertex collection if it does not exist.
if await school.has_vertex_collection('lectures'):
    school.vertex_collection('lectures').truncate()
else:
    await school.create_vertex_collection('lectures')

# Create "teach" edge definition if it does not exist.
if await school.has_edge_definition('teach'):
    school.edge_collection('teach').truncate()
else:
    await school.create_edge_definition(
        edge_collection='teach',
        from_vertex_collections=['teachers'],
        to_vertex_collections=['lectures']
    )
"""
